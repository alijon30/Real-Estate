import {
    SIGNUP_SUCCESS,
    SIGNUP_FAIL,
    LOGIN_SUCCESS,
    LOGIN_FAIL,
    LOGOUT
} from '../actions/types'

interface AuthActionPayload {
    access?: string
}

type AuthAction = {
    type: typeof SIGNUP_SUCCESS | typeof SIGNUP_FAIL | typeof LOGIN_SUCCESS | typeof LOGIN_FAIL | typeof LOGOUT;
    payload?: AuthActionPayload;
}

interface AuthState{
    token: string | null;
    isAuthenticated: boolean | null;
    loading: boolean;
}

const initialState: AuthState = {
    token: localStorage.getItem('token'),
    isAuthenticated: null,
    loading: false
};

export default function authReducer(state: AuthState = initialState, action: AuthAction ): AuthState {
    const {type, payload} = action;

    switch(type){
        case LOGIN_SUCCESS:
            localStorage.setItem('token', payload?.access!);
            return {
                ...state,
                isAuthenticated: true,
                loading: false,
                token: payload?.access!,
            }
        case SIGNUP_SUCCESS:
            return {
                ...state,
                isAuthenticated: false,
                loading: true
            }
        case SIGNUP_FAIL:
        case LOGIN_FAIL:
        case LOGOUT:
            localStorage.removeItem('token');
            return {
                ...state,
                token: null,
                isAuthenticated: false,
                loading: false
            }
        default:
            return state
    }
}
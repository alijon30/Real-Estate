import React, {useState, useEffect} from 'react';
import { Helmet } from 'react-helmet';
import axios from 'axios';
import Card from '../components/Card';
import Pagination from '../components/Pagination';


interface Listing {
  title: string;
  address: string;
  city: string;
  state: string;
  price : string;
  sale_type: string;
  home_type: string;
  bedrooms: string;
  bathrooms: string;
  sqft: string;
  photo_main: string;
  slug:string;
}

const Listings:React.FC = () => {

  const [listings, setListings] = useState<Listing[]>([]);
  const [count, setCount] = useState<number>(0);
  const [previous, setPrevious] = useState<string | null>(null);
  const [next, setNext] = useState<string | null>(null);
  const [active, setActive] = useState<number>(1);

  useEffect(()=> {
    
    window.scrollTo(0, 0);

    const fetchData = async () => {
      try {
        const res = await axios.get('http://localhost:8001/api/listings/?page=1');

        setListings(res.data.results);
        setCount(res.data.count);
        setPrevious(res.data.previous);
        setNext(res.data.next);
      } catch (err){

      }
    }
    fetchData();

  }, []);

  const displayListings = (): JSX.Element[] => {
    const displayElements: JSX.Element[] = listings.map((listing, index) => (
      <Card
        key={index} // Consider using a unique identifier from `listing` if available, like `listing.id`
        title={listing.title}
        address={listing.address}
        city={listing.city}
        state={listing.state}
        price={listing.price.toString()} // Ensure conversion to string if necessary
        sale_type={listing.sale_type}
        home_type={listing.home_type}
        bedrooms={listing.bedrooms.toString()} // Assuming you need to convert to string
        bathrooms={listing.bathrooms.toString()} // Assuming you need to convert to string
        sqft={listing.sqft.toString()} // Assuming you need to convert to string
        photo_main={listing.photo_main}
        slug={listing.slug}
      />
    ));
  
    // For creating rows every three listings, you could group `displayElements` into chunks
    const result: JSX.Element[] = [];
    for (let i = 0; i < displayElements.length; i += 3) {
      result.push(
        <div key={i} className="row">
          <div className="col-1-of-3">{displayElements[i]}</div>
          {displayElements[i + 1] ? <div className="col-1-of-3">{displayElements[i + 1]}</div> : null}
          {displayElements[i + 2] ? <div className="col-1-of-3">{displayElements[i + 2]}</div> : null}
        </div>
      );
    }
  
    return result;
  };
  

  const visitPage = (page:number) => {
    axios.get(`http://localhost:8001/api/listings/?page=${page}`)
    .then(res => {
      setListings(res.data.results);
      setPrevious(res.data.previous);
      setNext(res.data.next);
      setActive(page);
    })
    .catch(err => {

    })
  }

  const previous_number = () => {
    if (previous){
      axios.get(previous)
    .then(res => {
      setListings(res.data.results);
      setPrevious(res.data.previous);
      setNext(res.data.next);
      if (previous) 
        setActive(active-1)
      
    })
    .catch(err => {

    });
    }
  }
  const next_number = () => {
    if (next) {
    axios.get(next)
    .then(res => {
      setListings(res.data.results);
      setPrevious(res.data.previous);
      setNext(res.data.next);
      if (next) 
        setActive(active+1)
      
    })
    .catch(err => {

    });
    }
  }



  return (
    <main className='listings'>
      <Helmet>
        <title>Real Estate - Listings</title>
        <meta  name = 'description' content='Listings page' />
      </Helmet>
      <section className='listings__listings'>
        {displayListings()}
      </section>
      <section className="listings__pagination">
        <div className='row'>
          <Pagination
            itemsPerPage={3}
            count={count}
            visitPage={visitPage}
            previous={previous_number}
            next={next_number}
            active={active}
            setActive={setActive}
          />
        </div>
      </section>
    </main>
  )
}

export default Listings
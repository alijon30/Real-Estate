import { v4 as uuid } from 'uuid';
import { SET_ALERT, REMOVE_ALERT } from './types';
import { Dispatch } from 'redux';

interface AlertPayload {
  msg: string;
  alertType: 'success' | 'error';
  id: string;
}

interface AlertAction {
  type: typeof SET_ALERT | typeof REMOVE_ALERT;
  payload?: AlertPayload | string;
}

// Adjust setAlert to use Redux Thunk pattern
export const setAlert = (msg: string, alertType: 'success' | 'error', timeout = 5000) => {
  return (dispatch: Dispatch) => {
    const id = uuid();
    // Dispatch the SET_ALERT action immediately
    dispatch({
      type: SET_ALERT,
      payload: { msg, alertType, id },
    });

    // Use setTimeout to dispatch REMOVE_ALERT after the timeout
    setTimeout(() => {
      dispatch({
        type: REMOVE_ALERT,
        payload: id,
      });
    }, timeout);
  };
};
